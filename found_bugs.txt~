File:  found_bugs.txt

1)  subtract() class is not unsigned 63-bit safe, and does NOT detect incorrect results
  //BillyBrown @ 1-12-2017
  //test if able to handle 2^63-bit unsigned integer and subtract 2
  // 9223372036854775808 - 2 should NOT == 9223372036854775808, but rather 9223372036854775806
  // However, it appears that the following call to subtract() not only returns the wrong number but the assert does NOT get triggered either!
      $difference = $calc->subtract(9223372036854775808,2);
  // **** THE FOLLOWING ASSERT SHOULD FAIL... but it does NOT!
      $this->assertEquals(9223372036854775808, $difference); //check result of 9223372036854775808 - 2 SHOULD equal to 9223372036854775806, not the asserted 9223372036854775808

2)  divide() class in calculator.php, line 24.  Should NOT assume that $y will always be non-zero
      return $x / $y;

Fix:  Modified function to handle the error and provide a nice runtime message (assertion)

  public function divide($x, $y){
    //BillyBrown @ 1-12-2017
    //Should NOT assume that $y will always be non-zero
    //Added assertEquals() to check if $y is non-zero, and display helpful message @ runtime if it is
      assert($y != 0, "*** function divide() *** Division of $x by $y would be undefined!");
      return $x / $y;
  }

â€”
and here is the test:  calculator_test.php

  public function testDivide(){
      $calc = new Calculator();

      //BillyBrown @ 1-12-2017
      //test if divide() class properly catches @ run-time an invalid operation attempt such 2nd parameter passed is a zero (0)
      $quotient = $calc->divide(8,0);
      $this->assertEquals(0, $quotient); //check if 8/0 should produce an error since it division by zero is "undefined"
  }

====
3)  The function add() assumes parameters passed in as an array
  //BillyBrown @ 1-12-2017
  //test if the add() method in our calculator class works if a non-array value is passed in to be summed
      $calc = new Calculator();
      $sum = $calc->add(32767);
      $this->assertEquals(32767, $sum); //check if summed is equal to 32767

CalculatorTest::testAdd
Invalid argument supplied for foreach()

====
4)  The function add() assumes parameters passed in as an array
  //BillyBrown @ 1-12-2017
  //test if the multiply() method in our calculator class works if passed only a single number (rather than an array)
      $product = $calc->multiply(10);
      $this->assertEquals(10, $product); //check if a 10 lone should equal to 10

CalculatorTest::testMultiply
Invalid argument supplied for foreach()
